### Nested Loops in Python

**Concept:**

Nested loops are loops inside another loop. The inner loop runs completely for each iteration of the outer loop. This structure allows you to perform operations on multi-dimensional arrays or to handle tasks that involve multiple levels of iteration.

**Structure:**

```python
for outer_variable in outer_iterable:
    for inner_variable in inner_iterable:
        # Operations using outer_variable and inner_variable
```

**Example: Nested Loops with NumPy**

Let's use nested `for` loops to perform operations on a 2D NumPy array. For instance, we'll create a 2D array and calculate the sum of all elements in each row and column.

**Code:**

```python
import numpy as np

# Create a 2D NumPy array
array_2d = np.array([[1, 2, 3],
                     [4, 5, 6],
                     [7, 8, 9]])

# Initialize lists to store row and column sums
row_sums = []
col_sums = [0] * array_2d.shape[1]  # Initialize with zeros for each column

# Compute row sums using a nested loop
for row in range(array_2d.shape[0]):  # Outer loop: iterates over rows
    row_sum = 0
    for col in range(array_2d.shape[1]):  # Inner loop: iterates over columns
        row_sum += array_2d[row, col]
        col_sums[col] += array_2d[row, col]
    row_sums.append(row_sum)

print("Row sums:", row_sums)
print("Column sums:", col_sums)
```

**Explanation:**

1. **Create a 2D NumPy Array:**
   ```python
   array_2d = np.array([[1, 2, 3],
                        [4, 5, 6],
                        [7, 8, 9]])
   ```
   - **`array_2d`**: A 2D array with three rows and three columns.

2. **Initialize Lists for Sums:**
   ```python
   row_sums = []
   col_sums = [0] * array_2d.shape[1]
   ```
   - **`row_sums`**: List to store the sum of each row.
   - **`col_sums`**: List to store the sum of each column, initialized to zeros.

3. **Nested Loops to Compute Sums:**
   ```python
   for row in range(array_2d.shape[0]):  # Outer loop
       row_sum = 0
       for col in range(array_2d.shape[1]):  # Inner loop
           row_sum += array_2d[row, col]
           col_sums[col] += array_2d[row, col]
       row_sums.append(row_sum)
   ```
   - **Outer Loop**: Iterates over each row of the array.
   - **Inner Loop**: Iterates over each column of the current row.
   - **`row_sum += array_2d[row, col]`**: Adds the value of the current element to the row sum.
   - **`col_sums[col] += array_2d[row, col]`**: Adds the value of the current element to the corresponding column sum.
   - **`row_sums.append(row_sum)`**: Appends the sum of the current row to the `row_sums` list.

4. **Print Results:**
   ```python
   print("Row sums:", row_sums)
   print("Column sums:", col_sums)
   ```
   - **`row_sums`**: Contains the sum of each row.
   - **`col_sums`**: Contains the sum of each column.

**Application: Comparing Multiple Features in a Dataset**

Suppose you have a dataset with multiple features and you want to compare each feature with every other feature to compute the correlation between them. Hereâ€™s how you might use nested loops for this task:

**Code:**

```python
import pandas as pd
import numpy as np

# Sample dataset with multiple features
data = {'Feature1': [1, 2, 3, 4],
        'Feature2': [4, 3, 2, 1],
        'Feature3': [2, 3, 4, 5]}
df = pd.DataFrame(data)

# Initialize a dictionary to store correlation values
correlation_matrix = {}

# Nested loops to compare each feature with every other feature
for feature1 in df.columns:
    correlation_matrix[feature1] = {}
    for feature2 in df.columns:
        if feature1 != feature2:
            # Compute correlation between feature1 and feature2
            correlation = np.corrcoef(df[feature1], df[feature2])[0, 1]
            correlation_matrix[feature1][feature2] = correlation

print("Correlation Matrix:")
for feature1, comparisons in correlation_matrix.items():
    for feature2, corr in comparisons.items():
        print(f"Correlation between {feature1} and {feature2}: {corr:.2f}")
```

**Explanation:**

1. **Sample Dataset:**
   ```python
   data = {'Feature1': [1, 2, 3, 4],
           'Feature2': [4, 3, 2, 1],
           'Feature3': [2, 3, 4, 5]}
   df = pd.DataFrame(data)
   ```
   - **`df`**: A DataFrame with multiple features.

2. **Initialize Correlation Matrix:**
   ```python
   correlation_matrix = {}
   ```
   - **`correlation_matrix`**: Dictionary to store the correlation values between features.

3. **Nested Loops to Compute Correlations:**
   ```python
   for feature1 in df.columns:
       correlation_matrix[feature1] = {}
       for feature2 in df.columns:
           if feature1 != feature2:
               correlation = np.corrcoef(df[feature1], df[feature2])[0, 1]
               correlation_matrix[feature1][feature2] = correlation
   ```
   - **Outer Loop**: Iterates over each feature (`feature1`).
   - **Inner Loop**: Compares `feature1` with every other feature (`feature2`).
   - **`np.corrcoef(df[feature1], df[feature2])[0, 1]`**: Computes the Pearson correlation coefficient between `feature1` and `feature2`.
   - **Store the correlation value** in the `correlation_matrix`.

4. **Print Correlation Matrix:**
   ```python
   for feature1, comparisons in correlation_matrix.items():
       for feature2, corr in comparisons.items():
           print(f"Correlation between {feature1} and {feature2}: {corr:.2f}")
   ```
   - **Prints the correlation between each pair of features.**

### Summary

- **Nested Loops**: Allow for multi-level iteration and are useful for working with multi-dimensional data.
- **Example 1**: Uses nested loops to compute sums of rows and columns in a 2D NumPy array.
- **Example 2**: Uses nested loops to compare features in a dataset and compute correlations.

These examples show how nested loops can be used effectively in data science for data manipulation, analysis, and comparison tasks.